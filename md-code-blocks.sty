\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{md-code-blocks}[2023/04/11 Package that provides Markdown code blocks and syntax highlighting]
\RequirePackage{xcolor}
\RequirePackage{color}

%% Allow disabling syntax highlighting.
\newif\if@MD@highlight \@MD@highlighttrue
\DeclareOption{nohighlighting}{\@MD@highlightfalse}

\ProcessOptions\relax

%% Skip to use before and after code blocks. Can be redefined by the user.
\let\MDCodeBlockSkipAmount\medskipamount

%% Skip to use for \parskip in code blocks.
\let\MDCodeBlockLineSkipAmount\smallskipamount

%% Skip to use for empty lines in code blocks.
\let\MDEmptyLineSkipAmount\baselineskip

%% Name of the temporary output file.
\def\MDTempFileName{temporary.tex}

%% Name of the executable to use for syntax highlighting.
\def\MDHighlightEXE{ltx-highlight-code}

%% Run code at the beginning of a code block.
\def\MDAtBeginCodeBlock{\g@addto@macro\@MD@begin@codeblockhook}
\let\@MD@begin@codeblockhook\@empty

%% Switch to allow page breaks in code blocks.
\def\MDAllowBreak{\@MD@allow@breaktrue}
\newif\if@MD@allow@break \@MD@allow@breakfalse

%% Typeset Colours. Uses of this command can’t use {} since they
%% are interpreted literally.
\def\@MD@Color#1\@MD@#2\@MD@#3\@MD@{\textcolor{MD#1#2Color}{#3}}

%% Temporary output file.
\newwrite\@MD@tmpout

%% Write to tempfile.
\long\def\@MD@tmpwrite#1{%
    \immediate\openout\@MD@tmpout=\MDTempFileName%
    \immediate\write\@MD@tmpout{#1}%
    \immediate\closeout\@MD@tmpout
}

%% Define this now because we won’t be able to use \char` later.
\let\@MD@backquote`
\let\MDTextBackquote\@MD@backquote

%% Save this just in case.
\let\@MD@obeyspaces\@vobeyspaces

%% Remove first skip before next paragraph.
\def\@MD@nextparunskip{\everypar{\setbox\z@\lastbox\everypar{}}}

%% This definition is used when emitting a code block to a file. This
%% is just a dummy definition that never gets expanded.
\protected\def\@MD@Brk{\relax}

%% Actual definition of \@MD@Brk. This is basically just \par, but adjusted
%% so that we actually insert empty lines if there are multiple consecutive
%% line breaks.
\def\@MD@Typeset@Brk{\@ifnextchar \@MD@Brk {\vspace\MDEmptyLineSkipAmount}\par}

%% Make line breaks active.
\def\@MD@restorelines{\catcode`\^^M=5}
{
    \catcode`\^^M=\active %
    \gdef\@MD@obeylines{\catcode`\^^M\active \def^^M{%
        \@MD@Brk%
    }}%
}

%% Treat {} literally.
\def\@MD@obeybraces{
    \catcode`{=12
    \catcode`}=12
}

%% Make ` active.
\catcode``=\active

%% `   starts tt mode
%% ``  literal `
%% ``` starts code block
\def`{\@ifnextchar`\@MD@doublebackquote\@MD@singlebackquote}

%% Single ` starts tt mode to be closed by next `.
\def\@MD@singlebackquote{\begingroup\ttfamily\let`\endgroup}

%% Double `` starts code block if followed by another `, else inserts literal `.
%% We still need to consume the second `, so expand a \@gobble first.
\def\@MD@doublebackquote{
    \expandafter\@ifnextchar
    \expandafter`%
    \expandafter{%
    \expandafter\@MD@triplebackquote@start
    \expandafter\@MD@triplebackquote
    \expandafter}%
    \expandafter\@MD@backquote
    \@gobble
}

%% This macro is expanded before the code block is parsed.
\def\@MD@triplebackquote@start{%
	\ifvmode\else\unskip\par\fi
	\vspace\MDCodeBlockSkipAmount
	\begingroup
    \ttfamily
    \@MD@obeyspaces
    \@MD@obeylines
    \@MD@obeybraces
    \parindent\z@\relax
    \parskip\MDCodeBlockLineSkipAmount\relax
    \let`\@MD@backquote
}

%% Box that wraps the code block to prevent it from being broken across pages.
\long\def\@MD@box#1{%
    \let\@MD@Brk\@MD@Typeset@Brk
    \@MD@begin@codeblockhook
    \if@MD@allow@break#1\else\vbox{#1}\fi
}

%% Triple ``` starts a code block. This macro is expanded after the code block
%% has been parsed.
\long\def\@MD@triplebackquote`[#1]#2```{%
    %% Apply highlighting if we’re supposed to.
    \if@MD@highlight
        %% Write data to a file so we can run a command on it to apply syntax highlighting.
        \@MD@tmpwrite{\noexpand\makeatletter #2 \noexpand\makeatother}%
        %% Apply syntax highlighting to the code in \jobname.tmp
        \immediate\write18{\MDHighlightEXE\space #1 \MDTempFileName\space > \MDTempFileName.1}%
    %% Otherwise, just use the code.
    \else
        \@MD@box{#2}%
    \fi

    %% Close the group.
    \endgroup

    %% Include the formatted code. We need to apply almost the same formatting to it
    %% that we used when the code was parsed.
    \if@MD@highlight
        \begingroup
            \ttfamily
            \parindent\z@\relax
            \@MD@obeylines
            \@MD@obeybraces
            \@MD@box{\input{\MDTempFileName.1}}%
        \endgroup
    \fi

    %% Close the environment.
    \ifvmode\else\unskip\par\fi
    \vspace\MDCodeBlockSkipAmount
    \@MD@nextparunskip
    \@MD@allow@breakfalse
    \@MD@restorelines
}
